name: CI and Release

on:
  push:
    branches: [ "*" ]  # Trigger on push to any branch
  pull_request:
    branches: [ "*" ]  # Also trigger on pull requests
  workflow_dispatch:     # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npx tsc --noEmit

    - name: Run tests (if any)
      run: npm test
      continue-on-error: true  # Continue even if tests fail (in case no tests are set up yet)

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: test  # Only run if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build
      continue-on-error: true  # Continue even if build fails (in case build script is not set up)

    - name: Build Electron App (test)
      run: npm run dist:dir  # Build without packaging for testing
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: [test, build]  # Only run if tests and build pass
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'  # Only run on main branch or manual trigger
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # As specified in package.json engines
          cache: 'npm'

      - name: Generate package-lock.json if it doesn't exist
        run: |
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found. Generating..."
            npm install
          fi
        shell: bash

      - name: Install dependencies
        run: npm ci

      - name: Build Electron App (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag
        if: matrix.os == 'ubuntu-latest'  # Only run once on Ubuntu to avoid duplicate tags
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.VERSION }}" -m "Release v${{ steps.version.outputs.VERSION }}"
          git push origin "v${{ steps.version.outputs.VERSION }}"

      - name: Upload artifacts to GitHub Release
        if: matrix.os == 'ubuntu-latest'  # Only run once on Ubuntu to avoid duplicate releases
        uses: softprops/action-gh-release@v1
        with:
          # The path to the assets to upload. Glob patterns are supported.
          # electron-builder outputs to dist-electron/
          files: dist-electron/*
          # Generate a release note body. This can be customized.
          # For now, we'll use a generic message.
          body: |
            ## WBS2TB v${{ steps.version.outputs.VERSION }} Release
            
            This release provides the latest version of the WBS2TB (Excel WBS to Teambition sync tool) desktop application.
            
            ### What's new?
            * (Placeholder for release notes - please update this section with actual changes)
            
            ### Installation Instructions
            
            Please choose the installer corresponding to your operating system and CPU architecture.
            
            **Windows:**
            *   `WBS2TB Setup x64.exe`: For 64-bit Windows systems.
            *   `WBS2TB Setup arm64.exe`: For Windows on ARM (e.g., Surface Pro X).
            
            **macOS:**
            *   `WBS2TB-x64.dmg`: For Intel-based Macs.
            *   `WBS2TB-arm64.dmg`: For Apple Silicon Macs (M1, M2, etc.).
            
            **Linux:**
            *   `WBS2TB-x86_64.AppImage`: For 64-bit Linux distributions. Make the file executable (`chmod +x WBS2TB-x86_64.AppImage`) and run it.
            
            ### Support
            For issues and questions, please visit our [GitHub Issues page](${{ github.server_url }}/${{ github.repository }}/issues).
          prerelease: false # Set to true for pre-releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
