name: Cross-platform Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x64
          - os: windows-latest
            platform: windows
            arch: arm64
          # macOS
          - os: macos-latest
            platform: macos
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
          # Linux
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application (Windows)
        if: matrix.platform == 'windows'
        run: npm run package:win
        env:
          # For Windows signing (if configured in electron-builder.json)
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # WINDOWS_SIGNING_HASH: ${{ secrets.WINDOWS_SIGNING_HASH }} # Or other relevant secret
          CSC_IDENTITY_AUTO_DISCOVERY: true # Attempts to find a signing certificate
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package application (macOS)
        if: matrix.platform == 'macos'
        run: npm run package:mac
        env:
          # For notarization on macOS (if configured in electron-builder.json)
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_IDENTITY_AUTO_DISCOVERY: true # Attempts to find a signing certificate
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package application (Linux)
        if: matrix.platform == 'linux'
        run: npm run package:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-dist
          path: |
            dist-electron/
            !dist-electron/builder-debug.yml
            !dist-electron/builder-effective-config.yaml

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/

      - name: Flatten artifacts
        run: |
          mkdir -p release-files
          # 只复制各操作系统和CPU架构命名的二进制应用程序文件
          find all-artifacts/ -type f \( -name "WBS2TB-*.AppImage" -o -name "WBS2TB-*.dmg" -o -name "WBS2TB*.exe" \) -exec cp {} release-files/ \;
          # 排除不需要的文件
          cd release-files
          rm -f *.blockmap *.yml *.yaml app-update.yml elevate.exe WBS2TB.exe WBS2TB-arm64.exe
          cd ..
          echo "Final release files:"
          ls -la release-files/

      - name: Generate tag name and version
        id: tag_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check for existing tag and handle accordingly
        id: check_tag
        run: |
          if git ls-remote --tags origin refs/tags/${{ steps.tag_version.outputs.tag_name }}; then
            echo "Tag ${{ steps.tag_version.outputs.tag_name }} already exists. Deleting existing tag and proceeding with release."
            git push origin :refs/tags/${{ steps.tag_version.outputs.tag_name }} || echo "Failed to delete remote tag, proceeding anyway"
            echo "should_create_release=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ steps.tag_version.outputs.tag_name }} does not exist. Proceeding with release."
            echo "should_create_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_tag.outputs.should_create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-files/*
          tag_name: ${{ steps.tag_version.outputs.tag_name }}
          name: "Release v${{ env.VERSION }}"
          body: |
            ## 📦 wbs2tb-ts v${{ env.VERSION }}

            This release contains pre-built binaries for:
            - Windows (x64)
            - macOS (Intel x64 and Apple Silicon arm64)
            - Linux (x64 and arm64)

            ### 🚀 Installation
            1. Download the appropriate installer or package for your platform and architecture from the assets below.
            2. For Windows and macOS, run the installer. For Linux, follow the instructions for your specific package format (e.g., make the AppImage executable and run it, or install the .deb/.rpm package).

            **Commit:** ${{ github.sha }}
            **Build Run:** #${{ github.run_number }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
